-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- To Do -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

    --CHANGE

* cap game clock low bound 
* 
* change movement: add deceleration that runs constantly over acceleration (for smoother movement)
* executable file (..?)
* refactor code 

    --ADD

* Event pipeline
    -> input handler exhausts events
    -> need this pipeline to get calls throughout the game in GameMenu Game Map Player

* Game UI
    -> let the player know remaining health 
    -> will need some sort of update function based on player stats

* Map and tile managing:
    -> One map to rule them all -- BATTLE ARENA
    -> some premade configurations that get chosen randomly 
    -> when map is empty spawn enemies 
    -> 

* Propper collision detection and handling:
    -> player can fall in pits or be blocked by walls 
    -> collision objects are STATIC and DYNAMIC
    -> collision calculated only for dynamic objects

* States
    -> entity states separate, can easily be handled by player class and forget the rest
    -> 

* SOUND refined



What if I only used one room and multiple waves of enemies
Room can be random and enemies just keep spawning

The tile component will hold different sprites and display them all at once
Then the map will hold and array of tiles 


* Texturing 101: 
    * wrap borders around the rooms both on top and bottom (2 styles/level is fine)
        -> a small portion of rooms that don't have wall borders have pit borders instead
        -> some borders can come as carpet filling
    * floor textures ( IMPORTANT ! WHAT IS THE THEME OF THE LEVEL?? )
        1) carpet, stone, wood
        2) broken - carpet, stone, wood
        3) cobble, wood, stone + some polish here and there
    * walls are just the same for texture types 
        -> wall top borders feel like a horizontal cut-out in wall texture 
        -> wall = 2x player size
        -> walls that separate rooms have one texture for border and another for fill black

    * there is some sort of transsitionning between level styles (generally not very drastic in terms of materials)

    * lots of crates, boxes, stuff you can destroy

    * some rooms are always the same in terms of texturing

    * typical room size = 25-30 tiles



-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Change Log -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

4 Mar/2021:

* change includce statements to the corect way
    - new standard include files (like the tutorials) --had to change run.sh and all the includes
* change user input to be handled in the Handler class and link the return msg to some action


5 Mar/2021:

* Really basic sound: 
    1) in game music from Game class
    2) step sound effect
* Cleaned up code a little bit

6 Mar/2021:

* Dash move in Entity class
* Game now calls update on entities for movement animation and sound 
    -> Entity update handles states(primitive)
* Input Handler gets less commands now (only the ones that matter)

16 Mar/2021

* States
    -> game_state, menu, inventory, game_over
    -> and rewrite inputs and game class to handle game menu
* Asset Manager that loads and return assets on demand

* Engine as a separate entity that holds pointers to Asset Manager, Input Handler, Window and game state
    -> will later hold a request pipeline as well
    -> implemented as a shared pointer that is distributed among other classes that need it 

* Re-scaled the window down to 320,180 so I don't have to rescale up textures
